[
    {
      "metadata": {
        "type": "function_declaration",
        "startLine": 79,
        "endLine": 89
      },
      "text": "function curry(fn) {\n    return function curried(...args) {\n      if (args.length >= fn.length) {\n        return fn.apply(this, args);\n      } else {\n        return function(...args2) {\n          return curried.apply(this, args.concat(args2));\n        };\n      }\n    };\n  }",
      "embedding": [
        0.023,
        0.056,
        0.012,
        0.087,
        0.112,
        0.045,
        0.091,
        0.034,
        0.101,
        0.078,
        0.065,
        0.134,
        0.051,
        0.089,
        0.121,
        0.029,
        0.067,
        0.105,
        0.038,
        0.072
      ]
    },
    {
      "metadata": {
        "type": "function_declaration",
        "startLine": 92,
        "endLine": 96
      },
      "text": "function compose(...fns) {\n    return function(x) {\n      return fns.reduceRight((v, f) => f(v), x);\n    };\n  }",
      "embedding": [
        0.023,
        0.112,
        0.087,
        0.056,
        0.211,
        0.189,
        0.033,
        0.145,
        0.078,
        0.065
      ]
    },
    {
      "metadata": {
        "type": "function_declaration",
        "startLine": 99,
        "endLine": 108
      },
      "text": "function memoize(fn) {\n    const cache = new Map();\n    return function(...args) {\n      const key = JSON.stringify(args);\n      if (cache.has(key)) return cache.get(key);\n      const result = fn.apply(this, args);\n      cache.set(key, result);\n      return result;\n    };\n  }",
      "embedding": [
        0.023,
        0.112,
        0.087,
        0.221,
        0.189,
        0.056,
        0.098,
        0.145,
        0.032,
        0.039
      ]
    },
    {
      "metadata": {
        "type": "function_declaration",
        "startLine": 111,
        "endLine": 117
      },
      "text": "function debounce(fn, delay) {\n    let timeoutId;\n    return function(...args) {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => fn.apply(this, args), delay);\n    };\n  }",
      "embedding": [
        0.123,
        0.456,
        0.789,
        0.234,
        0.567,
        0.891,
        0.345,
        0.678,
        0.912,
        0.456
      ]
    },
    {
      "metadata": {
        "type": "function_declaration",
        "startLine": 120,
        "endLine": 129
      },
      "text": "function throttle(fn, limit) {\n    let inThrottle;\n    return function(...args) {\n      if (!inThrottle) {\n        fn.apply(this, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }",
      "embedding": [
        0.0234,
        0.1245,
        0.3456,
        0.0876,
        0.2312,
        0.5678,
        0.1122,
        0.4567,
        0.0987,
        0.3321
      ]
    },
    {
      "metadata": {
        "type": "class_declaration",
        "startLine": 136,
        "endLine": 166
      },
      "text": "class LinkedList {\n    constructor() {\n      this.head = null;\n      this.tail = null;\n      this.length = 0;\n    }\n  \n    // Add to end of list\n    append(value) {\n      const newNode = { value, next: null };\n      if (!this.head) {\n        this.head = newNode;\n        this.tail = newNode;\n      } else {\n        this.tail.next = newNode;\n        this.tail = newNode;\n      }\n      this.length++;\n    }\n  \n    // Add to beginning of list\n    prepend(value) {\n      const newNode = { value, next: this.head };\n      this.head = newNode;\n      if (!this.tail) this.tail = newNode;\n      this.length++;\n    }\n  \n    // Remove by value\n    \n  }",
      "embedding": [
        0.02,
        0.08,
        0.12,
        0.05,
        0.01,
        0.09,
        0.15,
        0.03,
        0.07,
        0.11
      ]
    }
  ]