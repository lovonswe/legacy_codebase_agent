remove(value) {
    if (!this.head) return;
    
    while (this.head && this.head.value === value) {
      this.head = this.head.next;
      this.length--;
    }

    let currentNode = this.head;
    while (currentNode.next) {
      if (currentNode.next.value === value) {
        currentNode.next = currentNode.next.next;
        this.length--;
      } else {
        currentNode = currentNode.next;
      }
    }

    if (this.tail.value === value) {
      this.tail = currentNode;
    }
  }

  // Find by value
  find(value) {
    let currentNode = this.head;
    while (currentNode) {
      if (currentNode.value === value) return currentNode;
      currentNode = currentNode.next;
    }
    return null;
  }

  // Convert to array
  toArray() {
    const elements = [];
    let currentNode = this.head;
    while (currentNode) {
      elements.push(currentNode.value);
      currentNode = currentNode.next;
    }
    return elements;
  }
}

// Stack implementation
class Stack {
  constructor() {
    this.items = [];
  }

  push(item) {
    this.items.push(item);
  }

  pop() {
    return this.items.pop();
  }

  peek() {
    return this.items[this.items.length - 1];
  }

  isEmpty() {
    return this.items.length === 0;
  }

  size() {
    return this.items.length;
  }

  clear() {
    this.items = [];
  }
}

// Queue implementation
class Queue {
  constructor() {
    this.items = [];
  }

  enqueue(item) {
    this.items.push(item);
  }

  dequeue() {
    return this.items.shift();
  }

  front() {
    return this.items[0];
  }

  isEmpty() {
    return this.items.length === 0;
  }

  size() {
    return this.items.length;
  }

  clear() {
    this.items = [];
  }
}

// Binary Search Tree implementation
class BinarySearchTree {
  constructor() {
    this.root = null;
  }

  insert(value) {
    const newNode = { value, left: null, right: null };
    if (!this.root) {
      this.root = newNode;
      return;
    }

    let currentNode = this.root;
    while (true) {
      if (value < currentNode.value) {
        if (!currentNode.left) {
          currentNode.left = newNode;
          return;
        }
        currentNode = currentNode.left;
      } else {
        if (!currentNode.right) {
          currentNode.right = newNode;
          return;
        }
        currentNode = currentNode.right;
      }
    }
  }

  search(value) {
    let currentNode = this.root;
    while (currentNode) {
      if (value === currentNode.value) return currentNode;
      if (value < currentNode.value) {
        currentNode = currentNode.left;
      } else {
        currentNode = currentNode.right;
      }
    }
    return null;
  }

  // In-order traversal
  traverseInOrder(node = this.root, result = []) {
    if (node.left) this.traverseInOrder(node.left, result);
    result.push(node.value);
    if (node.right) this.traverseInOrder(node.right, result);
    return result;
  }

  // Pre-order traversal
  traversePreOrder(node = this.root, result = []) {
    result.push(node.value);
    if (node.left) this.traversePreOrder(node.left, result);
    if (node.right) this.traversePreOrder(node.right, result);
    return result;
  }

  // Post-order traversal
  traversePostOrder(node = this.root, result = []) {
    if (node.left) this.traversePostOrder(node.left, result);
    if (node.right) this.traversePostOrder(node.right, result);
    result.push(node.value);
    return result;
  }
}

// ======================
// SECTION 4: ALGORITHMS
// ======================

// Sorting algorithms
const SortingAlgorithms = {
  // Bubble sort
  bubbleSort: function(arr) {
    const result = [...arr];
    let swapped;
    do {
      swapped = false;
      for (let i = 0; i < result.length - 1; i++) {
        if (result[i] > result[i + 1]) {
          [result[i], result[i + 1]] = [result[i + 1], result[i]];
          swapped = true;
        }
      }
    } while (swapped);
    return result;
  },

  // Quick sort
  quickSort: function(arr) {
    if (arr.length <= 1) return arr;
    const pivot = arr[0];
    const left = [];
    const right = [];
    for (let i = 1; i < arr.length; i++) {
      if (arr[i] < pivot) left.push(arr[i]);
      else right.push(arr[i]);
    }
    return [...this.quickSort(left), pivot, ...this.quickSort(right)];
  },

  // Merge sort
  mergeSort: function(arr) {
    if (arr.length <= 1) return arr;
    const mid = Math.floor(arr.length / 2);
    const left = arr.slice(0, mid);
    const right = arr.slice(mid);
    return this.merge(this.mergeSort(left), this.mergeSort(right));
  },

  merge: function(left, right) {
    const result = [];
    let leftIndex = 0;
    let rightIndex = 0;
    while (leftIndex < left.length && rightIndex < right.length) {
      if (left[leftIndex] < right[rightIndex]) {
        result.push(left[leftIndex]);
        leftIndex++;
      } else {
        result.push(right[rightIndex]);
        rightIndex++;
      }
    }
    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
  }
};

// Search algorithms
const SearchAlgorithms = {
  // Binary search
  binarySearch: function(arr, target) {
    let left = 0;
    let right = arr.length - 1;
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (arr[mid] === target) return mid;
      if (arr[mid] < target) left = mid + 1;
      else right = mid - 1;
    }
    return -1;
  },

  // Linear search
  linearSearch: function(arr, target) {
    for (let i = 0; i < arr.length; i++) {
      if (arr[i] === target) return i;
    }
    return -1;
  }
};

// Fibonacci with memoization
const fibonacci = memoize(function(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
});

// Factorial with memoization
const factorial = memoize(function(n) {
  if (n <= 1) return 1;
  return n * factorial(n - 1);
});

// ======================
// SECTION 5: DESIGN PATTERNS
// ======================

// Singleton pattern
const Singleton = (function() {
  let instance;
  function createInstance() {
    return {
      logMessage: function(message) {
        console.log(message);
      }
    };
  }
  return {
    getInstance: function() {
      if (!instance) {
        instance = createInstance();
      }
      return instance;
    }
  };
})();

// Observer pattern
class EventObserver {
  constructor() {
    this.observers = [];
  }

  subscribe(fn) {
    this.observers.push(fn);
  }

  unsubscribe(fn) {
    this.observers = this.observers.filter(subscriber => subscriber !== fn);
  }

  broadcast(data) {
    this.observers.forEach(subscriber => subscriber(data));
  }
}

// Factory pattern
class Car {
  constructor(options) {
    this.doors = options.doors || 4;
    this.color = options.color || 'white';
  }
}

class CarFactory {
  createCar(options) {
    return new Car(options);
  }
}

// Module pattern
const MyModule = (function() {
  const privateVar = 'I am private';
  function privateMethod() {
    console.log(privateVar);
  }

  return {
    publicMethod: function() {
      privateMethod();
    },
    publicVar: 'I am public'
  };
})();

// ======================
// SECTION 6: DOM UTILITIES
// ======================

const DOMUtils = {
  // Create element with attributes
  createElement: function(tag, attributes = {}, text = '') {
    const element = document.createElement(tag);
    for (const key in attributes) {
      element.setAttribute(key, attributes[key]);
    }
    if (text) element.textContent = text;
    return element;
  },

  // Add event listener with delegation
  delegate: function(parent, event, selector, handler) {
    parent.addEventListener(event, function(e) {
      if (e.target.matches(selector)) {
        handler.call(e.target, e);
      }
    });
  },

  // Get element position
  getPosition: function(element) {
    const rect = element.getBoundingClientRect();
    return {
      top: rect.top + window.pageYOffset,
      left: rect.left + window.pageXOffset
    };
  },

  // Toggle class on element
  toggleClass: function(element, className) {
    element.classList.toggle(className);
  }
};

// ======================
// SECTION 7: ASYNC PATTERNS
// ======================

// Promise utilities
const PromiseUtils = {
  // Delay promise
  delay: function(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  },

  // Retry promise
  retry: function(fn, retries = 3, delay = 1000) {
    return new Promise((resolve, reject) => {
      const attempt = function(n) {
        fn().then(resolve).catch(err => {
          if (n === 0) {
            reject(err);
          } else {
            setTimeout(() => attempt(n - 1), delay);
          }
        });
      };
      attempt(retries);
    });
  },

  // Timeout promise
  timeout: function(promise, ms) {
    return new Promise((resolve, reject) => {
      const timer = setTimeout(() => {
        reject(new Error('Promise timed out'));
      }, ms);

      promise.then(
        value => {
          clearTimeout(timer);
          resolve(value);
        },
        err => {
          clearTimeout(timer);
          reject(err);
        }
      );
    });
  }
};

// Fetch with timeout and retry
async function robustFetch(url, options = {}, timeout = 5000, retries = 3) {
  try {
    const response = await PromiseUtils.timeout(fetch(url, options), timeout);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    return await response.json();
  } catch (error) {
    if (retries > 0) {
      await PromiseUtils.delay(1000);
      return robustFetch(url, options, timeout, retries - 1);
    }
    throw error;
  }
}

// Parallel execution with limit
async function parallelWithLimit(tasks, limit) {
  const results = [];
  const executing = [];
  
  for (const task of tasks) {
    const p = Promise.resolve().then(() => task());
    results.push(p);
    const e = p.then(() => executing.splice(executing.indexOf(e), 1));
    executing.push(e);
    
    if (executing.length >= limit) {
      await Promise.race(executing);
    }
  }
  
  return Promise.all(results);
}

// ======================
// SECTION 8: VALIDATION UTILITIES
// ======================

const Validator = {
  // Email validation
  isEmail: function(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  },

  // URL validation
  isURL: function(url) {
    const re = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
    return re.test(url);
  },

  // Password strength
  isStrongPassword: function(password) {
    // At least 8 chars, 1 uppercase, 1 lowercase, 1 number, 1 special char
    const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    return re.test(password);
  },

  // Credit card validation (Luhn algorithm)
  isValidCreditCard: function(cardNumber) {
    let sum = 0;
    let shouldDouble = false;
    for (let i = cardNumber.length - 1; i >= 0; i--) {
      let digit = parseInt(cardNumber.charAt(i));
      if (shouldDouble) {
        digit *= 2;
        if (digit > 9) digit -= 9;
      }
      sum += digit;
      shouldDouble = !shouldDouble;
    }
    return sum % 10 === 0;
  }
};

// ======================
// SECTION 9: DATE UTILITIES
// ======================

const DateUtils = {
  // Format date
  format: function(date, format = 'YYYY-MM-DD') {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');

    return format
      .replace('YYYY', year)
      .replace('MM', month)
      .replace('DD', day)
      .replace('HH', hours)
      .replace('mm', minutes)
      .replace('ss', seconds);
  },

  // Add days to date
  addDays: function(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
  },

  // Difference between dates in days
  diffInDays: function(date1, date2) {
    const diffTime = Math.abs(date2 - date1);
    return Math.floor(diffTime / (1000 * 60 * 60 * 24));
  },

  // Check if date is between two dates
  isBetween: function(date, start, end) {
    return date >= start && date <= end;
  }
};

// ======================
// SECTION 10: MATH UTILITIES
// ======================

const MathUtils = {
  // Random number in range
  randomInRange: function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  },

  // Clamp number between min and max
  clamp: function(value, min, max) {
    return Math.min(Math.max(value, min), max);
  },

  // Linear interpolation
  lerp: function(start, end, t) {
    return start * (1 - t) + end * t;
  },

  // Map number from one range to another
  map: function(value, inMin, inMax, outMin, outMax) {
    return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
  },

  // Round to decimal places
  round: function(value, decimals = 0) {
    const factor = Math.pow(10, decimals);
    return Math.round(value * factor) / factor;
  }
};

// ======================
// SECTION 11: STRING UTILITIES
// ======================

const StringUtils = {
  // Capitalize first letter
  capitalize: function(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  },

  // Convert to camelCase
  toCamelCase: function(str) {
    return str.replace(/[-_](.)/g, (_, c) => c.toUpperCase());
  },

  // Convert to kebab-case
  toKebabCase: function(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  },

  // Truncate string with ellipsis
  truncate: function(str, length, ending = '...') {
    if (str.length <= length) return str;
    return str.substring(0, length - ending.length) + ending;
  },

  // Count words in string
  countWords: function(str) {
    return str.trim().split(/\s+/).length;
  }
};

// ======================
// SECTION 12: BROWSER UTILITIES
// ======================

const BrowserUtils = {
  // Get query parameters
  getQueryParams: function() {
    return Object.fromEntries(new URLSearchParams(window.location.search));
  },

  // Set query parameters
  setQueryParams: function(params) {
    const searchParams = new URLSearchParams();
    for (const key in params) {
      searchParams.set(key, params[key]);
    }
    window.history.pushState({}, '', `${window.location.pathname}?${searchParams.toString()}`);
  },

  // Check if localStorage is available
  isLocalStorageAvailable: function() {
    try {
      const testKey = '__test__';
      localStorage.setItem(testKey, testKey);
      localStorage.removeItem(testKey);
      return true;
    } catch (e) {
      return false;
    }
  },

  // Get scroll position
  getScrollPosition: function() {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
};

// ======================
// SECTION 13: EXPORT MODULES
// ======================

// Export all utilities if using modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    ObjectUtils,
    ArrayUtils,
    curry,
    compose,
    memoize,
    debounce,
    throttle,
    LinkedList,
    Stack,
    Queue,
    BinarySearchTree,
    SortingAlgorithms,
    SearchAlgorithms,
    fibonacci,
    factorial,
    Singleton,
    EventObserver,
    CarFactory,
    MyModule,
    DOMUtils,
    PromiseUtils,
    robustFetch,
    parallelWithLimit,
    Validator,
    DateUtils,
    MathUtils,
    StringUtils,
    BrowserUtils
  };